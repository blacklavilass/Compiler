/* Generated By:JavaCC: Do not edit this line. JavaParserFromPascalConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserFromPascalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EMPTY = 7;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int FOR = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int VAR = 12;
  /** RegularExpression Id. */
  int RESULT = 13;
  /** RegularExpression Id. */
  int THEN = 14;
  /** RegularExpression Id. */
  int DO = 15;
  /** RegularExpression Id. */
  int KEYWORD = 16;
  /** RegularExpression Id. */
  int NUM = 17;
  /** RegularExpression Id. */
  int STR = 18;
  /** RegularExpression Id. */
  int TRUE = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int LITERAL = 21;
  /** RegularExpression Id. */
  int TYPE = 22;
  /** RegularExpression Id. */
  int VARAIBLE_NAME = 23;
  /** RegularExpression Id. */
  int LPAR = 24;
  /** RegularExpression Id. */
  int RPAR = 25;
  /** RegularExpression Id. */
  int LBRACK = 26;
  /** RegularExpression Id. */
  int RBRACK = 27;
  /** RegularExpression Id. */
  int BEGIN = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int SEMI = 30;
  /** RegularExpression Id. */
  int COMMA = 31;
  /** RegularExpression Id. */
  int COLON = 32;
  /** RegularExpression Id. */
  int ASSIGN = 33;
  /** RegularExpression Id. */
  int ADD = 34;
  /** RegularExpression Id. */
  int SUB = 35;
  /** RegularExpression Id. */
  int MUL = 36;
  /** RegularExpression Id. */
  int DIVISION = 37;
  /** RegularExpression Id. */
  int MOD = 38;
  /** RegularExpression Id. */
  int DIV = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int OR = 41;
  /** RegularExpression Id. */
  int NOT = 42;
  /** RegularExpression Id. */
  int GE = 43;
  /** RegularExpression Id. */
  int LE = 44;
  /** RegularExpression Id. */
  int GT = 45;
  /** RegularExpression Id. */
  int LT = 46;
  /** RegularExpression Id. */
  int NEQUALS = 47;
  /** RegularExpression Id. */
  int EQUALS = 48;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"var\"",
    "\"Result\"",
    "\"then\"",
    "\"do\"",
    "<KEYWORD>",
    "<NUM>",
    "<STR>",
    "\"true\"",
    "\"false\"",
    "<LITERAL>",
    "<TYPE>",
    "<VARAIBLE_NAME>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"begin\"",
    "\"end\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"mod\"",
    "\"div\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"<>\"",
    "\"=\"",
  };

}
