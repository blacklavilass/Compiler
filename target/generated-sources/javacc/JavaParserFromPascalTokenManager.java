/* JavaParserFromPascalTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JavaParserFromPascalTokenManager.java */
import java.util.ArrayList;
import java.util.List;
import printer.*;
import nodes.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class JavaParserFromPascalTokenManager implements JavaParserFromPascalConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 50;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 3;
         if ((active0 & 0x8000008000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 24;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 13;
         }
         if ((active0 & 0xc00000000L) != 0L)
            return 87;
         if ((active0 & 0x84000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 65;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 22;
         }
         if ((active0 & 0x74000000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 48;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 41;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 19;
         }
         if ((active0 & 0x20000200L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 9;
         }
         if ((active0 & 0x100400L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 0;
            return 57;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 18;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 8;
         }
         if ((active0 & 0x7c030000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 48;
         }
         if ((active0 & 0x8100L) != 0L)
            return 48;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 66;
         }
         if ((active0 & 0x1400L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 88;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 64;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 12;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 60;
         }
         return -1;
      case 2:
         if ((active0 & 0x1400L) != 0L)
            return 48;
         if ((active0 & 0x5c030000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 48;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 59;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 89;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 11;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 90;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 63;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0x84200L) != 0L)
            return 48;
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 89;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 90;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 48;
         }
         return -1;
      case 4:
         if ((active0 & 0x100800L) != 0L)
            return 48;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 15;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 42:
         return jjStopAtPos(0, 36);
      case 43:
         return jjStartNfaWithStates_0(0, 34, 87);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjStartNfaWithStates_0(0, 35, 87);
      case 47:
         return jjStartNfaWithStates_0(0, 37, 3);
      case 58:
         {
         jjmatchedKind = 32;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 59:
         return jjStopAtPos(0, 30);
      case 60:
         {
         jjmatchedKind = 46;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x900000000000L);
      case 61:
         return jjStopAtPos(0, 48);
      case 62:
         {
         jjmatchedKind = 45;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000008000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100400L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x84000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x101000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10002000L);
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10020000000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x44000000400L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 48);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 48);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 48);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 48);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 48);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 118:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 48);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 48);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 48);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 48);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(3, 5); }
                  }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(6, 11); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(69, 75); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(12, 15); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 1:
                  { jjAddStates(16, 17); }
                  break;
               case 3:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(69, 75); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 70:
                  if (curChar == 46)
                     { jjCheckNAdd(71); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(74); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 76:
                  if (curChar == 46)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(77, 78); }
                  break;
               case 79:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(80); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(80); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(6, 11); }
                  break;
               case 82:
                  if (curChar == 39)
                     { jjCheckNAddStates(12, 15); }
                  break;
               case 83:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  break;
               case 84:
                  if (curChar == 39 && kind > 18)
                     kind = 18;
                  break;
               case 85:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 86:
                  if (curChar == 39 && kind > 21)
                     kind = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 111)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 97)
                     { jjCheckNAdd(21); }
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 115)
                     { jjCheckNAdd(58); }
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 110)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 108)
                     { jjCheckNAdd(7); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 101)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 111)
                     { jjCheckNAdd(21); }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 116)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(58); }
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 101)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 115)
                     { jjCheckNAdd(7); }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 102)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  else if (curChar == 123)
                     { jjCheckNAddTwoStates(1, 2); }
                  if (curChar == 116)
                     { jjAddStates(18, 19); }
                  else if (curChar == 102)
                     { jjAddStates(20, 21); }
                  else if (curChar == 105)
                     { jjAddStates(22, 23); }
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(48); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 125 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  { jjAddStates(24, 25); }
                  break;
               case 7:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 14:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 20:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 114 && kind > 16)
                     kind = 16;
                  break;
               case 23:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 108 && kind > 22)
                     kind = 22;
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 103 && kind > 22)
                     kind = 22;
                  break;
               case 31:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 110 && kind > 22)
                     kind = 22;
                  break;
               case 37:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 114 && kind > 22)
                     kind = 22;
                  break;
               case 44:
                  if (curChar == 97)
                     { jjCheckNAdd(43); }
                  break;
               case 45:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if (curChar == 105)
                     { jjAddStates(22, 23); }
                  break;
               case 51:
                  if (curChar == 101)
                     { jjCheckNAdd(43); }
                  break;
               case 52:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 102)
                     { jjAddStates(20, 21); }
                  break;
               case 58:
                  if (curChar == 101 && kind > 21)
                     kind = 21;
                  break;
               case 61:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 116)
                     { jjAddStates(18, 19); }
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 78:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 83:
                  { jjAddStates(30, 31); }
                  break;
               case 85:
                  { jjAddStates(32, 33); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(16, 17); }
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 83:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 85:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(32, 33); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\151\146", "\145\154\163\145", 
"\146\157\162", "\167\150\151\154\145", "\166\141\162", "\122\145\163\165\154\164", 
"\164\150\145\156", "\144\157", null, null, null, "\164\162\165\145", "\146\141\154\163\145", null, 
null, null, "\50", "\51", "\133", "\135", "\142\145\147\151\156", "\145\156\144", 
"\73", "\54", "\72", "\72\75", "\53", "\55", "\52", "\57", "\155\157\144", 
"\144\151\166", "\141\156\144", "\157\162", "\156\157\164", "\76\75", "\74\75", "\76", "\74", 
"\74\76", "\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   75, 76, 78, 69, 70, 72, 69, 70, 72, 75, 76, 78, 83, 84, 85, 86, 
   1, 2, 65, 67, 57, 61, 50, 55, 4, 5, 73, 74, 79, 80, 83, 84, 
   85, 86, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 7;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[1];
int[] jjemptyColNo = new int[1];
boolean[] jjbeenHere = new boolean[1];
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 7 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JavaParserFromPascalTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JavaParserFromPascalTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 87; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[87];
    private final int[] jjstateSet = new int[2 * 87];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
